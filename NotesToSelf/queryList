- Select all public Qs ---- home view
SELECT name, creator_id FROM quizzes WHERE is_private = false LIMIT 10;
// SELECT * FROM quizzes WHERE is_private = false;

- Select Q by ID --- indiv view
SELECT name, creator_id FROM quizzes WHERE id = 1;
// SELECT * FROM quizzes WHERE id = 1;

- Select all draft Qs --- user logged in
SELECT name, creator_id, is_published, is_private FROM quizzes WHERE is_published = false AND creator_id = 5 LIMIT 10;
// SELECT * FROM quizzes WHERE is_published = false AND creator_id = 5;

- Select all published Qs --- user logged in
SELECT name, creator_id, is_published, is_private FROM quizzes WHERE is_published = true AND creator_id = 5 LIMIT 10;
// SELECT * FROM quizzes WHERE is_published = true AND creator_id = 5;


- Select likes/dislikes for user ---- Quiz and filter
SELECT quiz_id, name, creator_id, SUM(is_like::int) as Likes, SUM(is_dislike::int) as Dislikes  FROM quizzes JOIN likes ON quizzes.id = quiz_id WHERE creator_id = 10 GROUP BY name, creator_id, quiz_id LIMIT 10;


- Select likes/dislikes for Q ---- Quiz and filter
SELECT quiz_id, name, creator_id, SUM(is_like::int) as Likes, SUM(is_dislike::int) as Dislikes  FROM quizzes JOIN likes ON quizzes.id = quiz_id WHERE quiz_id = 44 GROUP BY name, creator_id, quiz_id LIMIT 10;


- Add Q to DB --- button?
insert into quizzes (creator_id, name, image_url, description, is_private, is_published, url, subject, level, toughness) values (9, 'Parry''s Clover', 'http://dummyimage.com/176x135.png/ff4444/ffffff', 'Ut at dolor quis odio consequat varius. Integer ac leo.', false, true, '95Mp2w', 'Math', 'Elementary', 'Easy');

- Add user --- register
insert into users (username, password, email, name) values ('bwentwortho', 'password', 'bwentwortho@so-net.ne.jp', 'Biron Wentworth');

- Get user details by id --- login
SELECT * from users WHERE id = 22;

- Select all Qs for user --- history
SELECT users.id, quizzes.name  FROM users JOIN quizzes on creator_id = users.id WHERE users.id = 22;

- Select top 3 most liked Qs (images) --- home
SELECT quiz_id, SUM(is_like::int) AS Likes from likes GROUP BY quiz_id ORDER BY SUM(is_like::int) DESC LIMIT 3;

- Select all questions for Q by ID --- ??
SELECT id, quiz_id , question FROM trivia_questions WHERE quiz_id = 50;

- Select all answers for attempt (Q submission) with Result  --- ??
SELECT quiz_id, question_id, answer_selected FROM quiz_question_submissions WHERE quiz_id = 20 ORDER BY question_id;



- Select quiz by %name%
SELECT name FROM quizzes WHERE name LIKE '%bb%';

- Select all results for user for quiz
SELECT taker_id, quiz_id, date_taken, result FROM results WHERE taker_id=17 and quiz_id=61;

calculate results for one quiz based on correct answers

then you can create an insert into statement to push those values into the results table


2users
U1 create Q1 with Qq1

results
{1,2,1,20,<1>,Sum(QqS.is-C) [0],asd}
{2,2,1,21,<2>,Sum(QqS.is-C) [1], asd+}

Select * from results
where UID = 2 and Q1d = 1
MAX(result.id)

SUM(is_correct) FROM (
  Select * from results JOIN quiz_question JOIN trivaQ JOIN QUIZ
  where UID = 2 and Q1d = 1
)
2/res.rows.length = 0.5


SELECT sum(is_correct::int) FROM (
  SELECT quiz_id, taker_id, question_id, is_correct, answer_selected 
  FROM quiz_question_submissions
  WHERE taker_id = 1 AND quiz_id = 1 
  LIMIT (SELECT COUNT(*) from trivia_questions where quiz_id = 1) 
  -- OFFSET (SELECT COUNT(*) from trivia_questions where quiz_id = 1)*attempt_id)-1)
) as nested;


user completes quiz, get all questions for that quiz id for that user then see how many rows you have for that user and quiz submissions and them attemps = (total_submissions/questions_for_that_quiz)

1 Q 5 q 
on 1st attempt - 5/5 ==> 1
pn 2nd attemps - 10/5 ==> 2

